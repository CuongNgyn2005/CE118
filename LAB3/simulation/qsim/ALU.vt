// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/31/2025 00:24:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [1:0] S;
// wires                                               
wire [5:0] Y;

// assign statements (if any)                          
LU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.S(S),
	.Y(Y)
);
initial 
begin 
#20000000 $stop;
end 

// A[3]
initial
begin
	A[3] = 1'b1;
	A[3] = #4000000 1'b0;
	A[3] = #1000000 1'b1;
	A[3] = #3000000 1'b0;
	A[3] = #1000000 1'b1;
	A[3] = #1000000 1'b0;
	A[3] = #3000000 1'b1;
	A[3] = #3000000 1'b0;
end 

// A[2]
initial
begin
	A[2] = 1'b0;
	A[2] = #1000000 1'b1;
	A[2] = #1000000 1'b0;
	A[2] = #3000000 1'b1;
	A[2] = #1000000 1'b0;
	A[2] = #2000000 1'b1;
	A[2] = #1000000 1'b0;
	A[2] = #1000000 1'b1;
	A[2] = #1000000 1'b0;
	A[2] = #3000000 1'b1;
	A[2] = #1000000 1'b0;
	A[2] = #1000000 1'b1;
	A[2] = #1000000 1'b0;
end 

// A[1]
initial
begin
	A[1] = 1'b0;
	A[1] = #5000000 1'b1;
	A[1] = #1000000 1'b0;
	A[1] = #2000000 1'b1;
	A[1] = #2000000 1'b0;
	A[1] = #3000000 1'b1;
	A[1] = #1000000 1'b0;
	A[1] = #1000000 1'b1;
	A[1] = #1000000 1'b0;
end 

// A[0]
initial
begin
	A[0] = 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #1000000 1'b0;
	A[0] = #2000000 1'b1;
	A[0] = #1000000 1'b0;
	A[0] = #1000000 1'b1;
	A[0] = #1000000 1'b0;
	A[0] = #4000000 1'b1;
	A[0] = #1000000 1'b0;
end 

// B[3]
initial
begin
	B[3] = 1'b0;
	B[3] = #1000000 1'b1;
	B[3] = #2000000 1'b0;
	B[3] = #4000000 1'b1;
	B[3] = #2000000 1'b0;
	B[3] = #4000000 1'b1;
	B[3] = #1000000 1'b0;
	B[3] = #1000000 1'b1;
	B[3] = #1000000 1'b0;
end 

// B[2]
initial
begin
	B[2] = 1'b1;
	B[2] = #2000000 1'b0;
	B[2] = #4000000 1'b1;
	B[2] = #1000000 1'b0;
	B[2] = #2000000 1'b1;
	B[2] = #1000000 1'b0;
	B[2] = #6000000 1'b1;
	B[2] = #1000000 1'b0;
end 

// B[1]
initial
begin
	B[1] = 1'b0;
	B[1] = #7000000 1'b1;
	B[1] = #1000000 1'b0;
	B[1] = #1000000 1'b1;
	B[1] = #1000000 1'b0;
end 

// B[0]
initial
begin
	B[0] = 1'b0;
	B[0] = #14000000 1'b1;
	B[0] = #1000000 1'b0;
	B[0] = #1000000 1'b1;
	B[0] = #1000000 1'b0;
end 

// S[1]
initial
begin
	S[1] = 1'b0;
	S[1] = #6000000 1'b1;
	S[1] = #7000000 1'b0;
	S[1] = #2000000 1'b1;
	S[1] = #2000000 1'b0;
end 

// S[0]
initial
begin
	S[0] = 1'b0;
	S[0] = #3000000 1'b1;
	S[0] = #3000000 1'b0;
	S[0] = #4000000 1'b1;
	S[0] = #3000000 1'b0;
	S[0] = #1000000 1'b1;
	S[0] = #1000000 1'b0;
	S[0] = #1000000 1'b1;
	S[0] = #1000000 1'b0;
end 
initial 
begin 
#20000000 $stop;
end 
endmodule

